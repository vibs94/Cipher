/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package cipher;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.math.BigInteger;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import sun.security.util.BitArray;

/**
 *
 * @author vibodha
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    
    String text;
    String encrypt ="";
    String decrypt="";
    
    public MainWindow() {
        initComponents();
    }

    JFileChooser fileChoser = new JFileChooser();
   
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txt_fileLocation = new javax.swing.JTextField();
        btn_search = new javax.swing.JButton();
        btn_de = new javax.swing.JButton();
        btn_en = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_content = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txt_tobeWrite = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txt_key = new javax.swing.JTextField();
        lbl_message = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txt_fileLocation.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txt_fileLocation.setMaximumSize(new java.awt.Dimension(432, 30));
        txt_fileLocation.setMinimumSize(new java.awt.Dimension(432, 30));
        txt_fileLocation.setPreferredSize(new java.awt.Dimension(432, 30));

        btn_search.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btn_search.setText("Search");
        btn_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_searchActionPerformed(evt);
            }
        });

        btn_de.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btn_de.setText("Decrypt");
        btn_de.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deActionPerformed(evt);
            }
        });

        btn_en.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btn_en.setText("Encrypt");
        btn_en.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_enActionPerformed(evt);
            }
        });

        txt_content.setColumns(20);
        txt_content.setRows(5);
        jScrollPane1.setViewportView(txt_content);

        txt_tobeWrite.setColumns(20);
        txt_tobeWrite.setRows(5);
        jScrollPane2.setViewportView(txt_tobeWrite);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel1.setText("Cipher");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel2.setText("Key");

        txt_key.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txt_key.setMaximumSize(new java.awt.Dimension(370, 30));
        txt_key.setMinimumSize(new java.awt.Dimension(370, 30));
        txt_key.setPreferredSize(new java.awt.Dimension(370, 30));

        lbl_message.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lbl_message.setMaximumSize(new java.awt.Dimension(522, 25));
        lbl_message.setMinimumSize(new java.awt.Dimension(522, 25));
        lbl_message.setPreferredSize(new java.awt.Dimension(522, 25));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addComponent(btn_en)
                        .addGap(131, 131, 131)
                        .addComponent(btn_de))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addGap(32, 32, 32)
                        .addComponent(txt_key, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(txt_fileLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btn_search))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(243, 243, 243)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lbl_message, javax.swing.GroupLayout.PREFERRED_SIZE, 522, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_fileLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_search))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(lbl_message, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txt_key, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_en)
                    .addComponent(btn_de))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_searchActionPerformed
        txt_content.setText("");
        txt_fileLocation.setText("");
        txt_key.setText("");
        txt_tobeWrite.setText("");
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", "txt","text");
        fileChoser.setFileFilter(filter);
        if(fileChoser.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            File file = fileChoser.getSelectedFile();
            String fileName = file.getPath();
            txt_fileLocation.setText(fileName);
            FileReader fileReader;
            try {
                fileReader = new FileReader(file);
                BufferedReader buffer = new BufferedReader(fileReader);
                text = "";
                String readText = buffer.readLine();
                while(readText != null){
                   text = text + readText + "\n";
                   readText = buffer.readLine();
                }
                txt_content.setText(text);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
    }//GEN-LAST:event_btn_searchActionPerformed

    private void btn_enActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_enActionPerformed
        // TODO add your handling code here:
        text=txt_content.getText();
        txt_tobeWrite.setText("");
        if(text.equals("")|| text.equals(null)){
            lbl_message.setText("Select a file first!!!!");
            return;
        }
        String[] keys = txt_key.getText().split("_");
        if(keys.length!=2){
           lbl_message.setText("Wrong key format!!!");
            return; 
        }
        String key = keys[0];
        try{
        int shift = Integer.parseInt(keys[1]) ;
        //String decimal = new BigInteger(text.getBytes()).toString(2);
        //char[] decimalChar = decimal.toCharArray();
       // System.out.println(decimalChar);
        
        //char[] key = new BigInteger("hasi".getBytes()).toString(2).toCharArray();
        int j=0;
        for(int i=0;i<text.length();i++){
           j=j%key.length();
            //System.out.println("run");
           encrypt = encrypt + encry(Character.toString(text.charAt(i)),Character.toString(key.charAt(j)),shift);
           //System.out.print(Integer.valueOf(Character.toString(decimalChar[i]))^Integer.valueOf(Character.toString(key[j])));
           j++;
        }
        
        
        
       // decrypted = new String(new BigInteger(decrypt,2).toByteArray());
        
        txt_tobeWrite.setText(encrypt);
        }
        catch(NumberFormatException e){
             lbl_message.setText("Wrong key format!!!");
            return;
        }
        
       // encry(" ","\n");
       
    }//GEN-LAST:event_btn_enActionPerformed

    private void btn_deActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deActionPerformed
        // TODO add your handling code here:
        text=txt_content.getText();
        txt_tobeWrite.setText("");
        if(text.equals("")|| text.equals(null)){
            lbl_message.setText("Select a file first!!!!");
            return;
        }
        String[] keys = txt_key.getText().split("_");
        if(keys.length!=2){
           lbl_message.setText("Wrong key format!!!");
            return; 
        }
        String key = keys[0];
        try{
        int shift = Integer.parseInt(keys[1]) ;
        //String decimal = new BigInteger(text.getBytes()).toString(2);
        //char[] decimalChar = decimal.toCharArray();
       // System.out.println(decimalChar);
        
        
        
        //char[] key = new BigInteger("hasi".getBytes()).toString(2).toCharArray();
        int j=0;
        for(int i=0;i<text.length();i++){
           j=j%key.length();
            //System.out.println("run");
           decrypt = decrypt + decry(Character.toString(text.charAt(i)),Character.toString(key.charAt(j)),shift);
           //System.out.print(Integer.valueOf(Character.toString(decimalChar[i]))^Integer.valueOf(Character.toString(key[j])));
           j++;
        }
        
        
        
       // decrypted = new String(new BigInteger(decrypt,2).toByteArray());
        
        txt_tobeWrite.setText(decrypt);
        }
        catch(NumberFormatException e){
             lbl_message.setText("Wrong key format!!!");
            return;
        }
    }//GEN-LAST:event_btn_deActionPerformed

    String encry(String a, String b,int shift){
       String aBits = Integer.toBinaryString((int) a.charAt(0));
       int n = 8 - aBits.length();
       int outInt;
       for(int i=0; i<n;i++){
           aBits = "0" + aBits;
       }
       char[] aChar = aBits.toCharArray(); 
       String bBits = Integer.toBinaryString((int) b.charAt(0));
       n= 8 - bBits.length();
       for(int i=0; i<n;i++){
           bBits = "0" + bBits;
       }
       char[] bChar = bBits.toCharArray(); 
       String out ="";
      // System.out.println(a+" "+b);
      // System.out.println(aBits + " " + bBits);
       for(int i=0;i<bChar.length;i++){
          out = out + String.valueOf(Integer.valueOf(Character.toString(aChar[i]))^Integer.valueOf(Character.toString(bChar[i])));
       }
        
        //System.out.println(out);
        outInt = Integer.parseInt(out, 2) + shift%256;
        //System.out.println(Character.toString((char) outInt));
       return Character.toString((char) outInt);
    }
    
    String decry(String a, String b,int shift){
       int beforeShift = (int) a.charAt(0)-shift%256;
       if(beforeShift<0){
           beforeShift = 256 + beforeShift;
       }
       String aBits = Integer.toBinaryString(beforeShift);
       int n = 8 - aBits.length();
       int outInt;
       for(int i=0; i<n;i++){
           aBits = "0" + aBits;
       }
       char[] aChar = aBits.toCharArray(); 
       String bBits = Integer.toBinaryString((int) b.charAt(0));
       n= 8 - bBits.length();
       for(int i=0; i<n;i++){
           bBits = "0" + bBits;
       }
       char[] bChar = bBits.toCharArray(); 
       String out ="";
       //System.out.println(a+" "+b);
       //System.out.println(aBits + " " + bBits);
       for(int i=0;i<bChar.length;i++){
          out = out + String.valueOf(Integer.valueOf(Character.toString(aChar[i]))^Integer.valueOf(Character.toString(bChar[i])));
       }
        
        //System.out.println(out);
        outInt = Integer.parseInt(out, 2);
        //System.out.println(Character.toString((char) outInt));
       return Character.toString((char) outInt);
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_de;
    private javax.swing.JButton btn_en;
    private javax.swing.JButton btn_search;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbl_message;
    private javax.swing.JTextArea txt_content;
    private javax.swing.JTextField txt_fileLocation;
    private javax.swing.JTextField txt_key;
    private javax.swing.JTextArea txt_tobeWrite;
    // End of variables declaration//GEN-END:variables
}
